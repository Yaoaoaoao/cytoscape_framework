fix point of cytoscape.js

1. multiple line display + x_offset right 3px(applied)

// Draw text
	CanvasRenderer.prototype.drawText = function(context, element, textX, textY)
	......
		if (text != undefined) {
->add			var textArr = text.split('\n');
->add			var textLine = textArr.length;
->add			var X = 0;
->add			var Y = 0;
			
			var lineWidth = 2  * element._private.style["text-outline-width"].value; // *2 b/c the stroke is drawn centred on the middle
			if (lineWidth > 0) {
				context.lineWidth = lineWidth;
				// context.strokeText(text, textX, textY);
->add				X = textX;
->add				Y = textY - 0.5*12*(textLine-1);
->add			for (var i in textArr){
->add				context.strokeText("" + textArr[i], X, Y);
->add					Y += 12;
->add				}
			}

			// Thanks sysord@github for the isNaN checks!
			if (isNaN(textX)) { textX = 0; }
			if (isNaN(textY)) { textY = 0; }

			// context.fillText("" + text, textX, textY);
->add			X = textX;
->add			Y = textY - 0.5*12*(textLine-1);
->add			for (var i in textArr){
->add				context.fillText("" + textArr[i], X, Y);
->add				Y += 12;
->add			}



2. download (applied)			
		CanvasRenderer.prototype.png = function(){
...
	  CanvasRenderer.prototype.png = function( options ){
->add		var canvas = this.bufferCanvasImage( options );
->add		canvas.toBlob(function(blob){
->add		var networkFileName = $("#networkFileName").val();
->add		saveAs(blob, networkFileName+'.png');
->add	});
		// return this.bufferCanvasImage( options ).toDataURL('image/png');
	  };
			
3. breadthfirst spaces (applied)
	enlarge the spaces among nodes
	change topToBottom layout to leftToRight

    BreadthFirstLayout.prototype.run = function(){
        var params = this.options;
        var options = params;
        
        var cy = params.cy;
        var nodes = cy.nodes();
        var edges = cy.edges();
        var container = cy.container();
        
        // var width = container.clientWidth;
        // var height = container.clientHeight;
->alt		var height = container.clientWidth;
->alt      var width = container.clientHeight;
......

// find min distance we need to leave between nodes
        var minDistance = 0;
        for( var i = 0; i < nodes.length; i++ ){
            var w = nodes[i].outerWidth();
            var h = nodes[i].outerHeight();
            
            minDistance = Math.max(minDistance, w, h);
        }
			// minDistance *= 1.75; // just to have some nice spacing
->alt        minDistance *= 2.5; // just to have some nice spacing
		
		
		
.....		
from left to right
     
            if( options.circle ){
                var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize/2 : 0);
                var theta = 2 * Math.PI / depths[depth].length * index;

                if( depth === 0 && depths[0].length === 1 ){
                    radius = 1;
                }

                return {
                    // x: center.x + radius * Math.cos(theta),
                    // y: center.y + radius * Math.sin(theta)
->alt					y: center.x + radius * Math.cos(theta)-30,
->alt                  x: center.y + radius * Math.sin(theta)-100
                };

            } else {
                return {
                    // x: (index + 1) * distanceX,
                    // y: (depth + 1) * distanceY
->alt					y: (index + 1) * distanceX-30,
->alt                  x: (depth + 1) * distanceY-100
                };
            }

			
		var imgDim = [img.width, img.height];
		context.drawImage(img, 
				nodeX - imgDim[0] / 2,
				nodeY - imgDim[1] / 2,
				imgDim[0],
				imgDim[1]);
		
		context.restore();
->add		if (node._private.style["border-width"].value > 0) {
->add				context.stroke();
		}
		// context.stroke();